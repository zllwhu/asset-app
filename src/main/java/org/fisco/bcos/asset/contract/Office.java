package org.fisco.bcos.asset.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Office extends Contract {
    public static final String[] BINARY_ARRAY = {"","0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610d1257600080fd5b505af1158015610d26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d4a9190810190611643565b604051908082528060200260200182016040528015610d785781602001602082028038833980820191505090505b5095508673ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610ddf57600080fd5b505af1158015610df3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e179190810190611643565b604051908082528060200260200182016040528015610e4a57816020015b6060815260200190600190039081610e355790505b5094508673ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610eb157600080fd5b505af1158015610ec5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ee99190810190611643565b604051908082528060200260200182016040528015610f1c57816020015b6060815260200190600190039081610f075790505b5093508673ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610f8357600080fd5b505af1158015610f97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610fbb9190810190611643565b604051908082528060200260200182016040528015610fee57816020015b6060815260200190600190039081610fd95790505b509250600091505b8673ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561105a57600080fd5b505af115801561106e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110929190810190611643565b82121561145f578673ffffffffffffffffffffffffffffffffffffffff1663846719e0836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016110ee9190611aef565b602060405180830381600087803b15801561110857600080fd5b505af115801561111c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061114091908101906115f1565b90508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161119590611c6b565b602060405180830381600087803b1580156111af57600080fd5b505af11580156111c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111e79190810190611643565b86838151811015156111f557fe5b90602001906020020181815250508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161125690611c16565b600060405180830381600087803b15801561127057600080fd5b505af1158015611284573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506112ad91908101906116ad565b85838151811015156112bb57fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161131b90611b8c565b600060405180830381600087803b15801561133557600080fd5b505af1158015611349573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061137291908101906116ad565b848381518110151561138057fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113e090611cb9565b600060405180830381600087803b1580156113fa57600080fd5b505af115801561140e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061143791908101906116ad565b838381518110151561144557fe5b906020019060200201819052508180600101925050610ff6565b858585859c509c509c509c505050505050505050509193509193565b60006114878251611df1565b905092915050565b600061149b8251611e03565b905092915050565b60006114af8251611e15565b905092915050565b60006114c38251611e27565b905092915050565b60006114d78235611e39565b905092915050565b60006114eb8251611e39565b905092915050565b600082601f830112151561150657600080fd5b813561151961151482611d3b565b611d0e565b9150808252602083016020830185838301111561153557600080fd5b611540838284611e67565b50505092915050565b600082601f830112151561155c57600080fd5b815161156f61156a82611d3b565b611d0e565b9150808252602083016020830185838301111561158b57600080fd5b611596838284611e76565b50505092915050565b6000602082840312156115b157600080fd5b60006115bf8482850161147b565b91505092915050565b6000602082840312156115da57600080fd5b60006115e88482850161148f565b91505092915050565b60006020828403121561160357600080fd5b6000611611848285016114a3565b91505092915050565b60006020828403121561162c57600080fd5b600061163a848285016114b7565b91505092915050565b60006020828403121561165557600080fd5b6000611663848285016114df565b91505092915050565b60006020828403121561167e57600080fd5b600082013567ffffffffffffffff81111561169857600080fd5b6116a4848285016114f3565b91505092915050565b6000602082840312156116bf57600080fd5b600082015167ffffffffffffffff8111156116d957600080fd5b6116e584828501611549565b91505092915050565b6000806040838503121561170157600080fd5b600083013567ffffffffffffffff81111561171b57600080fd5b611727858286016114f3565b9250506020611738858286016114cb565b9150509250929050565b600080600080600060a0868803121561175a57600080fd5b600086013567ffffffffffffffff81111561177457600080fd5b611780888289016114f3565b9550506020611791888289016114cb565b945050604086013567ffffffffffffffff8111156117ae57600080fd5b6117ba888289016114f3565b935050606086013567ffffffffffffffff8111156117d757600080fd5b6117e3888289016114f3565b925050608086013567ffffffffffffffff81111561180057600080fd5b61180c888289016114f3565b9150509295509295909350565b600061182482611d81565b80845260208401935061183683611d67565b60005b828110156118685761184c868351611900565b61185582611dad565b9150602086019550600181019050611839565b50849250505092915050565b600061187f82611d8c565b8084526020840193508360208202850161189885611d74565b60005b848110156118d15783830388526118b3838351611945565b92506118be82611dba565b915060208801975060018101905061189b565b508196508694505050505092915050565b6118eb81611e43565b82525050565b6118fa81611e55565b82525050565b61190981611de7565b82525050565b600061191a82611da2565b80845261192e816020860160208601611e76565b61193781611ea9565b602085010191505092915050565b600061195082611d97565b808452611964816020860160208601611e76565b61196d81611ea9565b602085010191505092915050565b6000600c82527f726563656970745f6461746500000000000000000000000000000000000000006020830152604082019050919050565b6000600982527f77617265686f75736500000000000000000000000000000000000000000000006020830152604082019050919050565b6000600982527f6974656d5f6e616d6500000000000000000000000000000000000000000000006020830152604082019050919050565b6000600282527f69640000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600e82527f726563656970745f706572736f6e0000000000000000000000000000000000006020830152604082019050919050565b60006080820190508181036000830152611aa88187611819565b90508181036020830152611abc8186611874565b90508181036040830152611ad08185611874565b90508181036060830152611ae48184611874565b905095945050505050565b6000602082019050611b046000830184611900565b92915050565b60006020820190508181036000830152611b248184611945565b905092915050565b60006040820190508181036000830152611b46818561190f565b9050611b5560208301846118e2565b9392505050565b60006040820190508181036000830152611b76818561190f565b9050611b8560208301846118f1565b9392505050565b60006020820190508181036000830152611ba58161197b565b9050919050565b60006040820190508181036000830152611bc58161197b565b90508181036020830152611bd9818461190f565b905092915050565b60006040820190508181036000830152611bfa816119b2565b90508181036020830152611c0e818461190f565b905092915050565b60006020820190508181036000830152611c2f816119e9565b9050919050565b60006040820190508181036000830152611c4f816119e9565b90508181036020830152611c63818461190f565b905092915050565b60006020820190508181036000830152611c8481611a20565b9050919050565b60006040820190508181036000830152611ca481611a20565b9050611cb36020830184611900565b92915050565b60006020820190508181036000830152611cd281611a57565b905091","9050565b60006040820190508181036000830152611cf281611a57565b90508181036020830152611d06818461190f565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715611d3157600080fd5b8060405250919050565b600067ffffffffffffffff821115611d5257600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611dfc82611dc7565b9050919050565b6000611e0e82611dc7565b9050919050565b6000611e2082611dc7565b9050919050565b6000611e3282611dc7565b9050919050565b6000819050919050565b6000611e4e82611dc7565b9050919050565b6000611e6082611dc7565b9050919050565b82818337600083830152505050565b60005b83811015611e94578082015181840152602081019050611e79565b83811115611ea3576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058206a7c5c447aa0bab287d8c1ac2060cb37c949541e4aa30a7002d952ce47cd090f6c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","9050565b60006040820190508181036000830152611cf281611a57565b90508181036020830152611d06818461190f565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715611d3157600080fd5b8060405250919050565b600067ffffffffffffffff821115611d5257600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611dfc82611dc7565b9050919050565b6000611e0e82611dc7565b9050919050565b6000611e2082611dc7565b9050919050565b6000611e3282611dc7565b9050919050565b6000819050919050565b6000611e4e82611dc7565b9050919050565b6000611e6082611dc7565b9050919050565b82818337600083830152505050565b60005b83811015611e94578082015181840152602081019050611e79565b83811115611ea3576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820916efcf5c4504917312b91394bd992a62c3316e9ae2c21d88069d4d5179647366c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"warehouse\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"int256\"},{\"name\":\"item_name\",\"type\":\"string\"},{\"name\":\"receipt_date\",\"type\":\"string\"},{\"name\":\"receipt_person\",\"type\":\"string\"}],\"name\":\"record\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"warehouse\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"int256\"}],\"name\":\"remove\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"warehouse\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"name\":\"\",\"type\":\"int256[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"InsertResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"RemoveResult\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_RECORD = "record";

    public static final String FUNC_REMOVE = "remove";

    public static final String FUNC_SELECT = "select";

    public static final Event INSERTRESULT_EVENT = new Event("InsertResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event REMOVERESULT_EVENT = new Event("RemoveResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    protected Office(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt record(String warehouse, BigInteger id, String item_name,
            String receipt_date, String receipt_person) {
        final Function function = new Function(
                FUNC_RECORD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(warehouse), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(item_name), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receipt_date), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receipt_person)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] record(String warehouse, BigInteger id, String item_name, String receipt_date,
            String receipt_person, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_RECORD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(warehouse), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(item_name), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receipt_date), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receipt_person)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRecord(String warehouse, BigInteger id, String item_name,
            String receipt_date, String receipt_person) {
        final Function function = new Function(
                FUNC_RECORD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(warehouse), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(item_name), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receipt_date), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receipt_person)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, BigInteger, String, String, String> getRecordInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_RECORD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, BigInteger, String, String, String>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue()
                );
    }

    public Tuple1<BigInteger> getRecordOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_RECORD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt remove(String warehouse, BigInteger id) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(warehouse), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] remove(String warehouse, BigInteger id, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(warehouse), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(id)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemove(String warehouse, BigInteger id) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(warehouse), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(id)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getRemoveInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getRemoveOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple4<List<BigInteger>, List<String>, List<String>, List<String>> select(
            String warehouse) throws ContractException {
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(warehouse)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Int256>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<List<BigInteger>, List<String>, List<String>, List<String>>(
                convertToNative((List<Int256>) results.get(0).getValue()), 
                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                convertToNative((List<Utf8String>) results.get(2).getValue()), 
                convertToNative((List<Utf8String>) results.get(3).getValue()));
    }

    public List<InsertResultEventResponse> getInsertResultEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INSERTRESULT_EVENT, transactionReceipt);
        ArrayList<InsertResultEventResponse> responses = new ArrayList<InsertResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InsertResultEventResponse typedResponse = new InsertResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeInsertResultEvent(String fromBlock, String toBlock,
            List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeInsertResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RemoveResultEventResponse> getRemoveResultEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REMOVERESULT_EVENT, transactionReceipt);
        ArrayList<RemoveResultEventResponse> responses = new ArrayList<RemoveResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RemoveResultEventResponse typedResponse = new RemoveResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRemoveResultEvent(String fromBlock, String toBlock,
            List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRemoveResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static Office load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Office(contractAddress, client, credential);
    }

    public static Office deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Office.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class InsertResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class RemoveResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }
}
